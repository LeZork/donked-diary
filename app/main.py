"""
–û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω–∏–∫–∞ –Ω–∞ Streamlit

–≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç:
1. –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (Streamlit)
2. –õ–æ–≥–∏–∫—É —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
3. –°–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
4. –ê–Ω–∞–ª–∏—Ç–∏–∫—É –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É

Streamlit - —ç—Ç–æ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –Ω–∞ Python.
–û–Ω –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–µ–∑ –∑–Ω–∞–Ω–∏—è HTML/CSS/JavaScript.
"""

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
import sys, os
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# –ò–º–ø–æ—Ä—Ç—ã –æ—Å–Ω–æ–≤–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
import streamlit as st  # –í–µ–±-—Ñ—Ä–µ–π–º–≤–æ—Ä–∫
from datetime import date, datetime, timedelta  # –†–∞–±–æ—Ç–∞ —Å –¥–∞—Ç–∞–º–∏
import calendar  # –†–∞–±–æ—Ç–∞ —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º

# –ò–º–ø–æ—Ä—Ç—ã –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from app.db import init_db, get_session  # –†–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
from app.models import Task, Show, Book, LearningLog, Notification  # –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
from sqlmodel import select  # SQL-–∑–∞–ø—Ä–æ—Å—ã

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
init_db()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Streamlit
st.set_page_config(page_title="–ú–æ–π –¥–Ω–µ–≤–Ω–∏–∫", page_icon="üìî", layout="wide")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
# –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Ç–µ–ø–µ—Ä—å —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ SQLite –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

# =============================================================================
# –°–ò–°–¢–ï–ú–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô
# =============================================================================
# –≠—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—é—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö

def check_deadline_reminders():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∏–±–ª–∏–∂–∞—é—â–∏–µ—Å—è –¥–µ–¥–ª–∞–π–Ω—ã –∏ —Å–æ–∑–¥–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    
    –õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã:
    1. –ù–∞—Ö–æ–¥–∏—Ç –∑–∞–¥–∞—á–∏ —Å –¥–µ–¥–ª–∞–π–Ω–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–∏–µ 3 –¥–Ω—è
    2. –°–æ–∑–¥–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞
    3. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ —Å–æ–∑–¥–∞–Ω–æ –ª–∏ —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏ —Å–µ–≥–æ–¥–Ω—è
    """
    today = date.today()
    with get_session() as session:
        # –ó–∞–¥–∞—á–∏ —Å –¥–µ–¥–ª–∞–π–Ω–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–∏–µ 3 –¥–Ω—è
        upcoming_tasks = session.exec(
            select(Task).where(
                Task.due.isnot(None),
                Task.due >= today,
                Task.due <= today + timedelta(days=3),
                Task.done == False
            )
        ).all()
        
        for task in upcoming_tasks:
            days_left = (task.due - today).days
            if days_left == 0:
                message = f"‚è∞ –°–µ–≥–æ–¥–Ω—è –¥–µ–¥–ª–∞–π–Ω –∑–∞–¥–∞—á–∏: {task.title}"
                notification_type = "deadline"
            elif days_left == 1:
                message = f"‚ö†Ô∏è –ó–∞–≤—Ç—Ä–∞ –¥–µ–¥–ª–∞–π–Ω –∑–∞–¥–∞—á–∏: {task.title}"
                notification_type = "deadline"
            else:
                message = f"üìÖ –ß–µ—Ä–µ–∑ {days_left} –¥–Ω–µ–π –¥–µ–¥–ª–∞–π–Ω –∑–∞–¥–∞—á–∏: {task.title}"
                notification_type = "deadline"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–∑–¥–∞–Ω–æ –ª–∏ —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            existing = session.exec(
                select(Notification).where(
                    Notification.type == notification_type,
                    Notification.related_id == task.id,
                    Notification.created_date == today
                )
            ).first()
            
            if not existing:
                notification = Notification(
                    type=notification_type,
                    title="–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –¥–µ–¥–ª–∞–π–Ω–µ",
                    message=message,
                    related_id=task.id
                )
                session.add(notification)
                session.commit()

def check_achievements():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ —Å–æ–∑–¥–∞–µ—Ç –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    
    –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç:
    1. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –≤ –¥–µ–Ω—å (3+ –∑–∞–¥–∞—á)
    2. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–Ω–∏–≥ (–ø—Ä–æ—á–∏—Ç–∞–Ω–æ 100% —Å—Ç—Ä–∞–Ω–∏—Ü)
    3. –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ (60+ –º–∏–Ω—É—Ç –≤ –¥–µ–Ω—å)
    """
    today = date.today()
    with get_session() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        today_tasks = session.exec(
            select(Task).where(
                Task.done == True,
                Task.due == today
            )
        ).all()
        
        if len(today_tasks) >= 3:
            message = f"üéâ –û—Ç–ª–∏—á–Ω–æ! –í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ {len(today_tasks)} –∑–∞–¥–∞—á —Å–µ–≥–æ–¥–Ω—è!"
            notification_type = "achievement"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–∑–¥–∞–Ω–æ –ª–∏ —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            existing = session.exec(
                select(Notification).where(
                    Notification.type == notification_type,
                    Notification.title == "–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã",
                    Notification.created_date == today
                )
            ).first()
            
            if not existing:
                notification = Notification(
                    type=notification_type,
                    title="–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã",
                    message=message
                )
                session.add(notification)
                session.commit()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏
        completed_books = session.exec(
            select(Book).where(
                Book.pages_read >= Book.pages_total,
                Book.pages_total > 0
            )
        ).all()
        
        for book in completed_books:
            message = f"üìö –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∫–Ω–∏–≥—É '{book.title}'!"
            notification_type = "achievement"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–∑–¥–∞–Ω–æ –ª–∏ —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            existing = session.exec(
                select(Notification).where(
                    Notification.type == notification_type,
                    Notification.related_id == book.id
                )
            ).first()
            
            if not existing:
                notification = Notification(
                    type=notification_type,
                    title="–ö–Ω–∏–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
                    message=message,
                    related_id=book.id
                )
                session.add(notification)
                session.commit()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—É—á–µ–Ω–∏–µ
        learning_logs = session.exec(
            select(LearningLog).where(LearningLog.log_date == today)
        ).all()
        
        total_today_minutes = sum(log.minutes for log in learning_logs)
        if total_today_minutes >= 60:
            message = f"üêç –ü–æ—Ç—Ä—è—Å–∞—é—â–µ! –í—ã –∏–∑—É—á–∞–ª–∏ Python {total_today_minutes} –º–∏–Ω—É—Ç —Å–µ–≥–æ–¥–Ω—è!"
            notification_type = "motivation"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–∑–¥–∞–Ω–æ –ª–∏ —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            existing = session.exec(
                select(Notification).where(
                    Notification.type == notification_type,
                    Notification.title == "–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ",
                    Notification.created_date == today
                )
            ).first()
            
            if not existing:
                notification = Notification(
                    type=notification_type,
                    title="–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ",
                    message=message
                )
                session.add(notification)
                session.commit()

def get_unread_notifications():
    """
    –ü–æ–ª—É—á–∞–µ—Ç –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏)
    """
    with get_session() as session:
        notifications = session.exec(
            select(Notification).where(Notification.is_read == False).order_by(Notification.created_date.desc())
        ).all()
        return notifications

def mark_notification_read(notification_id):
    """
    –û—Ç–º–µ—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
    
    Args:
        notification_id: ID —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
    """
    with get_session() as session:
        notification = session.get(Notification, notification_id)
        if notification:
            notification.is_read = True
            session.add(notification)
            session.commit()

# =============================================================================
# –ú–ò–ì–†–ê–¶–ò–Ø –î–ê–ù–ù–´–•
# =============================================================================
# –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã

def migrate_show_data():
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç total_watched_episodes –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–µ—Ä–∏–∞–ª–æ–≤
    
    –≠—Ç–æ –Ω—É–∂–Ω–æ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—è –≤ –º–æ–¥–µ–ª—å Show.
    –î–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–∞–∑–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–∏—Ö —Å–µ—Ä–∏–π.
    """
    with get_session() as session:
        shows = session.exec(select(Show)).all()
        for show in shows:
            if show.total_watched_episodes == 0:  # –ï—Å–ª–∏ –ø–æ–ª–µ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ
                # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞: (—Å–µ–∑–æ–Ω - 1) * —Å—Ä–µ–¥–Ω–µ–µ_–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_—Å–µ—Ä–∏–π + —Ç–µ–∫—É—â–∏–µ_—Å–µ—Ä–∏–∏
                # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–µ —Å–µ—Ä–∏–∏ –∫–∞–∫ –±–∞–∑–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                show.total_watched_episodes = show.episode
                session.add(show)
        session.commit()

# –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
migrate_show_data()

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
check_deadline_reminders()
check_achievements()

st.title("üìî –ú–æ–π –¥–Ω–µ–≤–Ω–∏–∫")
st.caption("–ó–∞–¥–∞—á–∏ . –°–µ—Ä–∏–∞–ª—ã . –ö–Ω–∏–≥–∏ . –û–±—É—á–µ–Ω–∏–µ Python")

# =============================================================================
# –ü–ê–ù–ï–õ–¨ –£–í–ï–î–û–ú–õ–ï–ù–ò–ô
# =============================================================================
# –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
notifications = get_unread_notifications()
if notifications:
    st.subheader("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ —Ç–∏–ø–∞–º
    deadline_notifications = [n for n in notifications if n.type == "deadline"]
    achievement_notifications = [n for n in notifications if n.type == "achievement"]
    motivation_notifications = [n for n in notifications if n.type == "motivation"]
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–µ–¥–ª–∞–π–Ω–∞—Ö
    if deadline_notifications:
        st.warning("‚è∞ **–ü—Ä–∏–±–ª–∏–∂–∞—é—â–∏–µ—Å—è –¥–µ–¥–ª–∞–π–Ω—ã:**")
        for notif in deadline_notifications:
            col1, col2 = st.columns([4, 1])
            with col1:
                st.write(f"‚Ä¢ {notif.message}")
            with col2:
                if st.button("‚úì", key=f"read_deadline_{notif.id}", help="–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ"):
                    mark_notification_read(notif.id)
                    st.rerun()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    if achievement_notifications:
        st.success("üéâ **–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:**")
        for notif in achievement_notifications:
            col1, col2 = st.columns([4, 1])
            with col1:
                st.write(f"‚Ä¢ {notif.message}")
            with col2:
                if st.button("‚úì", key=f"read_achievement_{notif.id}", help="–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ"):
                    mark_notification_read(notif.id)
                    st.rerun()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if motivation_notifications:
        st.info("üí™ **–ú–æ—Ç–∏–≤–∞—Ü–∏—è:**")
        for notif in motivation_notifications:
            col1, col2 = st.columns([4, 1])
            with col1:
                st.write(f"‚Ä¢ {notif.message}")
            with col2:
                if st.button("‚úì", key=f"read_motivation_{notif.id}", help="–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ"):
                    mark_notification_read(notif.id)
                    st.rerun()
    
    # –ö–Ω–æ–ø–∫–∞ "–û—Ç–º–µ—Ç–∏—Ç—å –≤—Å–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ"
    if st.button("üì≠ –û—Ç–º–µ—Ç–∏—Ç—å –≤—Å–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ"):
        for notif in notifications:
            mark_notification_read(notif.id)
        st.rerun()
    
    st.divider()

# =============================================================================
# –ü–û–ò–°–ö –ü–û –í–°–ï–ú –†–ê–ó–î–ï–õ–ê–ú
# =============================================================================
# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –∑–∞–¥–∞—á–∞–º, —Å–µ—Ä–∏–∞–ª–∞–º, –∫–Ω–∏–≥–∞–º –∏ –æ–±—É—á–µ–Ω–∏—é
search_query = st.text_input("üîç –ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º —Ä–∞–∑–¥–µ–ª–∞–º", placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏, –∫–Ω–∏–≥–∏, —Å–µ—Ä–∏–∞–ª–∞ –∏–ª–∏ —Ç–µ–º—ã –æ–±—É—á–µ–Ω–∏—è...")

# –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
if search_query:
    st.subheader(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: '{search_query}'")
    
    with get_session() as session:
        # –ü–æ–∏—Å–∫ –≤ –∑–∞–¥–∞—á–∞—Ö
        tasks = session.exec(select(Task).where(Task.title.contains(search_query))).all()
        # –ü–æ–∏—Å–∫ –≤ —Å–µ—Ä–∏–∞–ª–∞—Ö
        shows = session.exec(select(Show).where(Show.title.contains(search_query))).all()
        # –ü–æ–∏—Å–∫ –≤ –∫–Ω–∏–≥–∞—Ö
        books = session.exec(select(Book).where(Book.title.contains(search_query) | Book.author.contains(search_query))).all()
        # –ü–æ–∏—Å–∫ –≤ –æ–±—É—á–µ–Ω–∏–∏
        learning_logs = session.exec(select(LearningLog).where(LearningLog.topic.contains(search_query) | LearningLog.notes.contains(search_query))).all()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
    if tasks:
        st.write("**üìã –ó–∞–¥–∞—á–∏:**")
        for task in tasks:
            status = "‚úÖ" if task.done else "‚è∞"
            st.write(f"- {status} {task.title} ({task.priority})")
    
    if shows:
        st.write("**üé¨ –°–µ—Ä–∏–∞–ª—ã:**")
        for show in shows:
            st.write(f"- {show.title} - S{show.season} E{show.episode}")
    
    if books:
        st.write("**üìö –ö–Ω–∏–≥–∏:**")
        for book in books:
            progress = f"{book.pages_read}/{book.pages_total}" if book.pages_total > 0 else f"{book.pages_read} —Å—Ç—Ä."
            st.write(f"- {book.title} ({book.author}) - {progress}")
    
    if learning_logs:
        st.write("**üêç –û–±—É—á–µ–Ω–∏–µ:**")
        for log in learning_logs:
            st.write(f"- {log.topic} - {log.minutes} –º–∏–Ω ({log.log_date})")
    
    if not any([tasks, shows, books, learning_logs]):
        st.info("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    st.divider()

# =============================================================================
# –ë–´–°–¢–†–´–ï –î–ï–ô–°–¢–í–ò–Ø
# =============================================================================
# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –≤–∫–ª–∞–¥–∫–∏
st.subheader("‚ö° –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è")
col1, col2, col3, col4, col5 = st.columns([1, 1, 1, 1, 1])

with col1:
    if st.button("üìù –ë—ã—Å—Ç—Ä–∞—è –∑–∞–¥–∞—á–∞", use_container_width=True):
        st.session_state.quick_task = True
        st.rerun()

with col2:
    if st.button("üìö –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É", use_container_width=True):
        st.session_state.quick_book = True
        st.rerun()

with col3:
    if st.button("üé¨ –ù–æ–≤—ã–π —Å–µ—Ä–∏–∞–ª", use_container_width=True):
        st.session_state.quick_show = True
        st.rerun()

with col4:
    if st.button("üêç –ó–∞–ø–∏—Å—å –æ–±—É—á–µ–Ω–∏—è", use_container_width=True):
        st.session_state.quick_learning = True
        st.rerun()

with col5:
    if st.button("‚ùå –ó–∞–∫—Ä—ã—Ç—å –≤—Å–µ", use_container_width=True):
        st.session_state.quick_task = False
        st.session_state.quick_book = False
        st.session_state.quick_show = False
        st.session_state.quick_learning = False
        st.rerun()

# =============================================================================
# –ë–´–°–¢–†–´–ï –§–û–†–ú–´
# =============================================================================
# –†–∞—Å–∫—Ä—ã–≤–∞—é—â–∏–µ—Å—è —Ñ–æ—Ä–º—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
# –ö–∞–∂–¥–∞—è —Ñ–æ—Ä–º–∞ –∏–º–µ–µ—Ç –∫–Ω–æ–ø–∫—É –∑–∞–∫—Ä—ã—Ç–∏—è –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
if st.session_state.get("quick_task", False):
    with st.expander("üìù –ë—ã—Å—Ç—Ä–∞—è –∑–∞–¥–∞—á–∞", expanded=True):
        col1, col2 = st.columns([4, 1])
        with col1:
            with st.form("quick_task_form", clear_on_submit=True):
                title = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏")
                priority = st.selectbox("–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç", ["–ù–∏–∑–∫–∏–π", "–°—Ä–µ–¥–Ω–∏–π", "–í—ã—Å–æ–∫–∏–π"])
                submit = st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å")
                if submit and title.strip():
                    with get_session() as session:
                        task = Task(title=title.strip(), priority=priority, done=False)
                        session.add(task)
                        session.commit()
                    st.success("–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
                    st.session_state.quick_task = False
                    st.rerun()
        with col2:
            if st.button("‚ùå –ó–∞–∫—Ä—ã—Ç—å", use_container_width=True):
                st.session_state.quick_task = False
                st.rerun()

if st.session_state.get("quick_book", False):
    with st.expander("üìö –ë—ã—Å—Ç—Ä–∞—è –∫–Ω–∏–≥–∞", expanded=True):
        col1, col2 = st.columns([4, 1])
        with col1:
            with st.form("quick_book_form", clear_on_submit=True):
                title = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏")
                author = st.text_input("–ê–≤—Ç–æ—Ä")
                submit = st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å")
                if submit and title.strip():
                    with get_session() as session:
                        book = Book(title=title.strip(), author=author.strip())
                        session.add(book)
                        session.commit()
                    st.success("–ö–Ω–∏–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
                    st.session_state.quick_book = False
                    st.rerun()
        with col2:
            if st.button("‚ùå –ó–∞–∫—Ä—ã—Ç—å", use_container_width=True):
                st.session_state.quick_book = False
                st.rerun()

if st.session_state.get("quick_show", False):
    with st.expander("üé¨ –ë—ã—Å—Ç—Ä—ã–π —Å–µ—Ä–∏–∞–ª", expanded=True):
        col1, col2 = st.columns([4, 1])
        with col1:
            with st.form("quick_show_form", clear_on_submit=True):
                title = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–∏–∞–ª–∞")
                submit = st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å")
                if submit and title.strip():
                    with get_session() as session:
                        show = Show(title=title.strip())
                        session.add(show)
                        session.commit()
                    st.success("–°–µ—Ä–∏–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω!")
                    st.session_state.quick_show = False
                    st.rerun()
        with col2:
            if st.button("‚ùå –ó–∞–∫—Ä—ã—Ç—å", use_container_width=True):
                st.session_state.quick_show = False
                st.rerun()

if st.session_state.get("quick_learning", False):
    with st.expander("üêç –ë—ã—Å—Ç—Ä–æ–µ –æ–±—É—á–µ–Ω–∏–µ", expanded=True):
        col1, col2 = st.columns([4, 1])
        with col1:
            with st.form("quick_learning_form", clear_on_submit=True):
                topic = st.text_input("–¢–µ–º–∞")
                minutes = st.number_input("–ú–∏–Ω—É—Ç—ã", min_value=1, value=30)
                submit = st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å")
                if submit and topic.strip():
                    with get_session() as session:
                        learning_log = LearningLog(topic=topic.strip(), minutes=minutes, log_date=date.today())
                        session.add(learning_log)
                        session.commit()
                    st.success("–ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
                    st.session_state.quick_learning = False
                    st.rerun()
        with col2:
            if st.button("‚ùå –ó–∞–∫—Ä—ã—Ç—å", use_container_width=True):
                st.session_state.quick_learning = False
                st.rerun()

st.divider()

# =============================================================================
# –û–°–ù–û–í–ù–´–ï –í–ö–õ–ê–î–ö–ò –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
# =============================================================================
# –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
tabs = st.tabs(["üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", "‚úÖ –ó–∞–¥–∞—á–∏", "üé¨ –°–µ—Ä–∏–∞–ª—ã", "üìö –ö–Ω–∏–≥–∏", "üêç –û–±—É—á–µ–Ω–∏–µ Python", "üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å", "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"])

with tabs[0]:
    """
    –í–ö–õ–ê–î–ö–ê –ê–ù–ê–õ–ò–¢–ò–ö–ò
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –≥—Ä–∞—Ñ–∏–∫–∏ –ø–æ –≤—Å–µ–º —Ä–∞–∑–¥–µ–ª–∞–º
    """
    st.subheader("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    with get_session() as session:
        tasks = session.exec(select(Task)).all()
        shows = session.exec(select(Show)).all()
        books = session.exec(select(Book)).all()
        learning_logs = session.exec(select(LearningLog)).all()
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        total_tasks = len(tasks)
        completed_tasks = len([t for t in tasks if t.done])
        completion_rate = (completed_tasks / total_tasks * 100) if total_tasks > 0 else 0
        
        st.metric(
            "–ó–∞–¥–∞—á–∏", 
            f"{completed_tasks}/{total_tasks}",
            f"{completion_rate:.1f}% –≤—ã–ø–æ–ª–Ω–µ–Ω–æ"
        )
    
    with col2:
        total_shows = len(shows)
        total_episodes = sum(s.total_watched_episodes for s in shows)
        
        st.metric(
            "–°–µ—Ä–∏–∞–ª—ã", 
            f"{total_shows} —Å–µ—Ä–∏–∞–ª–æ–≤",
            f"{total_episodes} —Å–µ—Ä–∏–π –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ"
        )
    
    with col3:
        total_books = len(books)
        total_pages = sum(b.pages_read for b in books)
        
        st.metric(
            "–ö–Ω–∏–≥–∏", 
            f"{total_books} –∫–Ω–∏–≥",
            f"{total_pages} —Å—Ç—Ä–∞–Ω–∏—Ü –ø—Ä–æ—á–∏—Ç–∞–Ω–æ"
        )
    
    with col4:
        total_learning_time = sum(l.minutes for l in learning_logs)
        learning_days = len(set(l.log_date for l in learning_logs))
        
        st.metric(
            "–û–±—É—á–µ–Ω–∏–µ", 
            f"{total_learning_time} –º–∏–Ω",
            f"{learning_days} –¥–Ω–µ–π"
        )
    
    st.divider()
    
    # –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üìà –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–¥–∞—á")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º
        priority_stats = {}
        for task in tasks:
            priority = task.priority
            if priority not in priority_stats:
                priority_stats[priority] = {"total": 0, "completed": 0}
            priority_stats[priority]["total"] += 1
            if task.done:
                priority_stats[priority]["completed"] += 1
        
        for priority, stats in priority_stats.items():
            completion_rate = (stats["completed"] / stats["total"] * 100) if stats["total"] > 0 else 0
            st.write(f"**{priority}**: {stats['completed']}/{stats['total']} ({completion_rate:.1f}%)")
            st.progress(completion_rate / 100)
        
        # –ì—Ä–∞—Ñ–∏–∫ –æ–±—É—á–µ–Ω–∏—è –ø–æ –¥–Ω—è–º
        st.subheader("üìö –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —á—Ç–µ–Ω–∏—è")
        if books:
            reading_progress = []
            for book in books:
                if book.pages_total > 0:
                    progress = (book.pages_read / book.pages_total) * 100
                    reading_progress.append({
                        "–ö–Ω–∏–≥–∞": book.title[:20] + "..." if len(book.title) > 20 else book.title,
                        "–ü—Ä–æ–≥—Ä–µ—Å—Å": progress
                    })
            
            if reading_progress:
                import pandas as pd
                df = pd.DataFrame(reading_progress)
                st.bar_chart(df.set_index("–ö–Ω–∏–≥–∞")["–ü—Ä–æ–≥—Ä–µ—Å—Å"])
    
    with col2:
        st.subheader("üé¨ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–∏–∞–ª–æ–≤")
        
        if shows:
            # –¢–æ–ø —Å–µ—Ä–∏–∞–ª–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–µ—Ä–∏–π
            show_stats = []
            for show in shows:
                show_stats.append({
                    "–°–µ—Ä–∏–∞–ª": show.title[:15] + "..." if len(show.title) > 15 else show.title,
                    "–¢–µ–∫—É—â–∏–π —Å–µ–∑–æ–Ω": f"S{show.season} E{show.episode}",
                    "–í—Å–µ–≥–æ —Å–µ—Ä–∏–π": show.total_watched_episodes
                })
            
            import pandas as pd
            df = pd.DataFrame(show_stats)
            st.dataframe(df, use_container_width=True)
        
        st.subheader("üêç –û–±—É—á–µ–Ω–∏–µ –ø–æ –¥–Ω—è–º")
        
        if learning_logs:
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º
            daily_learning = {}
            for log in learning_logs:
                date_str = str(log.log_date)
                if date_str not in daily_learning:
                    daily_learning[date_str] = 0
                daily_learning[date_str] += log.minutes
            
            # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
            learning_data = []
            for date_str, minutes in sorted(daily_learning.items()):
                learning_data.append({
                    "–î–∞—Ç–∞": date_str,
                    "–ú–∏–Ω—É—Ç—ã": minutes
                })
            
            if learning_data:
                import pandas as pd
                df = pd.DataFrame(learning_data)
                st.line_chart(df.set_index("–î–∞—Ç–∞")["–ú–∏–Ω—É—Ç—ã"])
    
    # –¶–µ–ª–∏ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    st.divider()
    st.subheader("üéØ –¶–µ–ª–∏ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if total_tasks > 0:
            st.success(f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ {completed_tasks} –∑–∞–¥–∞—á")
        if completion_rate >= 80:
            st.success("üèÜ –û—Ç–ª–∏—á–Ω–∞—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å!")
        elif completion_rate >= 60:
            st.info("üìà –•–æ—Ä–æ—à–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å")
        else:
            st.warning("üí™ –ú–æ–∂–Ω–æ –ª—É—á—à–µ!")
    
    with col2:
        if total_learning_time > 0:
            avg_daily = total_learning_time / max(learning_days, 1)
            st.info(f"üìö –í —Å—Ä–µ–¥–Ω–µ–º {avg_daily:.1f} –º–∏–Ω/–¥–µ–Ω—å")
        if total_pages > 0:
            st.info(f"üìñ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ {total_pages} —Å—Ç—Ä–∞–Ω–∏—Ü")
    
    with col3:
        if total_episodes > 0:
            st.info(f"üé¨ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ {total_episodes} —Å–µ—Ä–∏–π")
        if total_books > 0:
            completed_books = len([b for b in books if b.pages_read >= b.pages_total and b.pages_total > 0])
            st.info(f"üìö –ó–∞–≤–µ—Ä—à–µ–Ω–æ {completed_books} –∫–Ω–∏–≥")

with tabs[1]:
    """
    –í–ö–õ–ê–î–ö–ê –ó–ê–î–ê–ß
    –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ, –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ
    """
    st.subheader("–ó–∞–¥–∞—á–∏")

    # –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    with st.form("task_form_db", clear_on_submit=True):
        col1, col2, col3 = st.columns([3, 1.2, 1.2])
        with col1:
            title = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏")
        with col2:
            priority = st.selectbox("–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç", ["–ù–∏–∑–∫–∏–π", "–°—Ä–µ–¥–Ω–∏–π", "–í—ã—Å–æ–∫–∏–π"])
        with col3:
            due = st.date_input("–î–µ–¥–ª–∞–π–Ω", value=date.today())
        desc = st.text_area("–û–ø–∏—Å–∞–Ω–∏–µ", height=80)
        submit = st.form_submit_button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
        if submit and title.strip():
            with get_session() as session:
                task = Task(title=title.strip(), priority=priority, due=due, desc=desc.strip(), done=False)
                session.add(task)
                session.commit()
            st.success("–ó–∞–¥–∞—á–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
            st.rerun()

    st.divider()

    # –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –∏–∑ –ë–î
    with get_session() as session:
        tasks = session.exec(
            select(Task).order_by(Task.done.asc(), Task.due.is_(None), Task.due.asc())
        ).all()

    if tasks:
        for t in tasks:
            col1, col2, col3, col4 = st.columns([3, 1, 1, 1])
            with col1:
                meta = f"{t.priority}"
                if t.due:
                    meta += f" ¬∑ –¥–æ {t.due}"
                st.markdown(f"**{t.title}** ‚Äî {meta}")
                if t.desc:
                    st.caption(t.desc)
            with col2:
                if st.button("–ì–æ—Ç–æ–≤–æ" if not t.done else "–°–Ω—è—Ç—å", key=f"task_done_{t.id}"):
                    with get_session() as session:
                        obj = session.get(Task, t.id)
                        if obj:
                            obj.done = not obj.done
                            session.add(obj)
                            session.commit()
                    st.rerun()
            with col3:
                if st.button("–£–¥–∞–ª–∏—Ç—å", key=f"task_del_{t.id}"):
                    with get_session() as session:
                        obj = session.get(Task, t.id)
                        if obj:
                            session.delete(obj)
                            session.commit()
                    st.rerun()
            with col4:
                st.write("‚úÖ" if t.done else "‚Äî")
    else:
        st.info("–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á.")

with tabs[2]:
    """
    –í–ö–õ–ê–î–ö–ê –°–ï–†–ò–ê–õ–û–í
    –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–µ—Ä–∏–∞–ª–æ–≤
    """
    st.subheader("–°–µ—Ä–∏–∞–ª—ã")
    
    # –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    with st.form("show_form_db", clear_on_submit=True):
        col1, col2, col3 = st.columns([3, 1, 1])
        with col1:
            title = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–∏–∞–ª–∞")
        with col2:
            season = st.number_input("–°–µ–∑–æ–Ω", min_value=1, value=1, step=1)
        with col3:
            episode = st.number_input("–°–µ—Ä–∏—è (—Ç–µ–∫—É—â–∞—è)", min_value=0, value=0, step=1)
        total_episodes = st.number_input("–í—Å–µ–≥–æ —Å–µ—Ä–∏–π –≤ —Å–µ–∑–æ–Ω–µ", min_value=0, value=0, step=1)
        submit = st.form_submit_button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
        if submit and title.strip():
            with get_session() as session:
                show = Show(title=title.strip(), season=int(season), episode=int(episode), total=int(total_episodes))
                session.add(show)
                session.commit()
            st.success("–°–µ—Ä–∏–∞–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
            st.rerun()
    
    st.divider()
    
    # –°–ø–∏—Å–æ–∫ —Å–µ—Ä–∏–∞–ª–æ–≤ –∏–∑ –ë–î
    with get_session() as session:
        shows = session.exec(select(Show).order_by(Show.title.asc())).all()
    
    if shows:
        for s in shows:
            progress = f"{s.episode}/{s.total}" if s.total else f"{s.episode}"
            col1, col2, col3, col4 = st.columns([3, 1, 1, 1])
            with col1:
                st.markdown(f"**{s.title}** ‚Äî S{s.season} E{progress} (–≤—Å–µ–≥–æ: {s.total_watched_episodes})")
            with col2:
                if st.button("‚ûï –°–µ—Ä–∏—è", key=f"show_next_{s.id}"):
                    with get_session() as session:
                        obj = session.get(Show, s.id)
                        if obj:
                            obj.episode += 1
                            obj.total_watched_episodes += 1
                            session.add(obj)
                            session.commit()
                    st.rerun()
            with col3:
                if st.button("–ù–æ–≤—ã–π —Å–µ–∑–æ–Ω", key=f"show_new_season_{s.id}"):
                    with get_session() as session:
                        obj = session.get(Show, s.id)
                        if obj:
                            obj.season += 1
                            obj.episode = 0
                            session.add(obj)
                            session.commit()
                    st.rerun()
            with col4:
                if st.button("–£–¥–∞–ª–∏—Ç—å", key=f"show_del_{s.id}"):
                    with get_session() as session:
                        obj = session.get(Show, s.id)
                        if obj:
                            session.delete(obj)
                            session.commit()
                    st.rerun()
    else:
        st.info("–ü–æ–∫–∞ –Ω–µ—Ç —Å–µ—Ä–∏–∞–ª–æ–≤.")

with tabs[3]:
    """
    –í–ö–õ–ê–î–ö–ê –ö–ù–ò–ì
    –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —á—Ç–µ–Ω–∏—è –∫–Ω–∏–≥
    """
    st.subheader("–ö–Ω–∏–≥–∏")
    
    # –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    with st.form("book_form_db", clear_on_submit=True):
        col1, col2, col3 = st.columns([3, 1, 1])
        with col1:
            title = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏")
            author = st.text_input("–ê–≤—Ç–æ—Ä")
        with col2:
            pages_total = st.number_input("–°—Ç—Ä–∞–Ω–∏—Ü –≤—Å–µ–≥–æ", min_value=0, value=0, step=1)
        with col3:
            pages_read = st.number_input("–ü—Ä–æ—á–∏—Ç–∞–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü", min_value=0, value=0, step=1)
        submit = st.form_submit_button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
        if submit and title.strip():
            with get_session() as session:
                book = Book(title=title.strip(), author=author.strip(), pages_total=int(pages_total), pages_read=int(pages_read))
                session.add(book)
                session.commit()
            st.success("–ö–Ω–∏–≥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
            st.rerun()
    
    st.divider()
    
    # –°–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ –∏–∑ –ë–î
    with get_session() as session:
        books = session.exec(select(Book).order_by(Book.title.asc())).all()
    
    if books:
        for b in books:
            ratio = (b.pages_read / b.pages_total * 100) if b.pages_total else 0
            col1, col2, col3, col4 = st.columns([3, 2, 1, 1])
            with col1:
                st.markdown(f"**{b.title}** ‚Äî {b.author}")
                st.progress(min(1.0, ratio / 100.0), text=f"{b.pages_read} –∏–∑ {b.pages_total} ({ratio:.0f}%)")
            with col2:
                new_read = st.number_input("–î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü", min_value=0, value=0, step=1, key=f"book_add_{b.id}")
            with col3:
                if st.button("‚ûï –ü—Ä–æ–≥—Ä–µ—Å—Å", key=f"book_inc_{b.id}"):
                    with get_session() as session:
                        obj = session.get(Book, b.id)
                        if obj:
                            obj.pages_read += int(new_read)
                            session.add(obj)
                            session.commit()
                    st.rerun()
            with col4:
                if st.button("–£–¥–∞–ª–∏—Ç—å", key=f"book_del_{b.id}"):
                    with get_session() as session:
                        obj = session.get(Book, b.id)
                        if obj:
                            session.delete(obj)
                            session.commit()
                    st.rerun()
    else:
        st.info("–ü–æ–∫–∞ –Ω–µ—Ç –∫–Ω–∏–≥.")

with tabs[4]:
    """
    –í–ö–õ–ê–î–ö–ê –û–ë–£–ß–ï–ù–ò–Ø PYTHON
    –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑—É—á–µ–Ω–∏—è Python
    """
    st.subheader("–û–±—É—á–µ–Ω–∏–µ Python")
    
    # –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
    with st.form("learning_form_db", clear_on_submit=True):
        topic = st.text_input("–¢–µ–º–∞/–∫—É—Ä—Å/–≥–ª–∞–≤–∞")
        time_spent = st.number_input("–í—Ä–µ–º—è (–º–∏–Ω)", min_value=0, value=30, step=10)
        notes = st.text_area("–ó–∞–º–µ—Ç–∫–∏", height=80)
        submit = st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å")
        if submit and topic.strip():
            with get_session() as session:
                learning_log = LearningLog(topic=topic.strip(), minutes=int(time_spent), notes=notes.strip(), log_date=date.today())
                session.add(learning_log)
                session.commit()
            st.success("–ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞")
            st.rerun()
    
    st.divider()
    
    # –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –æ–±—É—á–µ–Ω–∏—è –∏–∑ –ë–î
    with get_session() as session:
        learning_logs = session.exec(select(LearningLog).order_by(LearningLog.log_date.desc())).all()
    
    if learning_logs:
        total_min = sum(r.minutes for r in learning_logs)
        st.metric("–í—Å–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏", f"{total_min} –º–∏–Ω")
        for r in learning_logs:
            col1, col2, col3 = st.columns([3, 2, 1])
            with col1:
                st.markdown(f"**{r.topic}** ‚Äî {r.log_date}")
                if r.notes:
                    st.caption(r.notes)
            with col2:
                st.write(f"{r.minutes} –º–∏–Ω")
            with col3:
                if st.button("–£–¥–∞–ª–∏—Ç—å", key=f"learn_del_{r.id}"):
                    with get_session() as session:
                        obj = session.get(LearningLog, r.id)
                        if obj:
                            session.delete(obj)
                            session.commit()
                    st.rerun()
    else:
        st.info("–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ–±—É—á–µ–Ω–∏—è.")

with tabs[5]:
    """
    –í–ö–õ–ê–î–ö–ê –ö–ê–õ–ï–ù–î–ê–†–Ø
    –ö–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –≤–∏–¥ —Å –∑–∞–¥–∞—á–∞–º–∏ –∏ –æ–±—É—á–µ–Ω–∏–µ–º
    """
    st.subheader("–ö–∞–ª–µ–Ω–¥–∞—Ä—å")
    
    # –í—ã–±–æ—Ä –º–µ—Å—è—Ü–∞ –∏ –≥–æ–¥–∞
    col1, col2, col3 = st.columns([1, 2, 1])
    with col1:
        if st.button("‚óÄÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π"):
            if "current_month" not in st.session_state:
                st.session_state.current_month = date.today().month
                st.session_state.current_year = date.today().year
            if st.session_state.current_month == 1:
                st.session_state.current_month = 12
                st.session_state.current_year -= 1
            else:
                st.session_state.current_month -= 1
            st.rerun()
    
    with col2:
        if "current_month" not in st.session_state:
            st.session_state.current_month = date.today().month
            st.session_state.current_year = date.today().year
        
        month_name = calendar.month_name[st.session_state.current_month]
        st.markdown(f"<h3 style='text-align: center;'>{month_name} {st.session_state.current_year}</h3>", unsafe_allow_html=True)
    
    with col3:
        if st.button("–°–ª–µ–¥—É—é—â–∏–π ‚ñ∂Ô∏è"):
            if "current_month" not in st.session_state:
                st.session_state.current_month = date.today().month
                st.session_state.current_year = date.today().year
            if st.session_state.current_month == 12:
                st.session_state.current_month = 1
                st.session_state.current_year += 1
            else:
                st.session_state.current_month += 1
            st.rerun()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    with get_session() as session:
        # –ó–∞–¥–∞—á–∏ —Å –¥–µ–¥–ª–∞–π–Ω–∞–º–∏
        tasks = session.exec(
            select(Task).where(Task.due.isnot(None))
        ).all()
        
        # –ó–∞–ø–∏—Å–∏ –æ–±—É—á–µ–Ω–∏—è
        learning_logs = session.exec(
            select(LearningLog)
        ).all()
    
    # –°–æ–∑–¥–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
    cal = calendar.monthcalendar(st.session_state.current_year, st.session_state.current_month)
    
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º
    days = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
    header_cols = st.columns(7)
    for i, day_name in enumerate(days):
        with header_cols[i]:
            st.markdown(f"""
                <div style='background-color: #f8f9fa; padding: 8px; text-align: center; font-weight: bold; border-radius: 5px; margin: 2px;'>
                    {day_name}
                </div>
            """, unsafe_allow_html=True)
    
    # –°–æ–∑–¥–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—É—é —Å–µ—Ç–∫—É —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º
    for week in cal:
        cols = st.columns(7)
        for i, day in enumerate(week):
            with cols[i]:
                if day == 0:
                    st.markdown("<div style='height: 80px; margin: 2px;'></div>", unsafe_allow_html=True)
                else:
                    current_date = date(st.session_state.current_year, st.session_state.current_month, day)
                    is_today = current_date == date.today()
                    is_weekend = i >= 5  # –°—É–±–±–æ—Ç–∞ –∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
                    
                    # –°—Ç–∏–ª—å –¥–ª—è —è—á–µ–π–∫–∏ –¥–Ω—è
                    cell_style = "border: 2px solid #007bff; " if is_today else ""
                    cell_style += "background-color: #fff3cd; " if is_weekend else "background-color: #ffffff; "
                    cell_style += "border: 1px solid #dee2e6; padding: 8px; margin: 2px; border-radius: 8px; min-height: 80px;"
                    
                    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–Ω—è
                    day_style = "color: #dc3545; font-weight: bold; font-size: 16px;" if is_today else "color: #495057; font-weight: bold;"
                    if is_weekend:
                        day_style = "color: #6c757d; font-weight: bold;"
                    
                    st.markdown(f"""
                        <div style='{cell_style}'>
                            <div style='{day_style}; text-align: center; margin-bottom: 5px;'>{day}</div>
                    """, unsafe_allow_html=True)
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–¥–∞—á–∏ –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å
                    day_tasks = [t for t in tasks if t.due == current_date]
                    if day_tasks:
                        for task in day_tasks:
                            status = "‚úÖ" if task.done else "‚è∞"
                            priority_color = {
                                "–í—ã—Å–æ–∫–∏–π": "#dc3545",
                                "–°—Ä–µ–¥–Ω–∏–π": "#ffc107", 
                                "–ù–∏–∑–∫–∏–π": "#28a745"
                            }.get(task.priority, "#28a745")
                            
                            st.markdown(f"""
                                <div style='background-color: {priority_color}; color: white; padding: 3px; margin: 1px; border-radius: 4px; font-size: 9px; text-align: center;'>
                                    {status} {task.title[:12]}{'...' if len(task.title) > 12 else ''}
                                </div>
                            """, unsafe_allow_html=True)
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–ø–∏—Å–∏ –æ–±—É—á–µ–Ω–∏—è –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å
                    day_learning = [l for l in learning_logs if l.log_date == current_date]
                    if day_learning:
                        total_minutes = sum(l.minutes for l in day_learning)
                        st.markdown(f"""
                            <div style='background-color: #6f42c1; color: white; padding: 3px; margin: 1px; border-radius: 4px; font-size: 9px; text-align: center;'>
                                üêç {total_minutes}–º
                            </div>
                        """, unsafe_allow_html=True)
                    
                    st.markdown("</div>", unsafe_allow_html=True)
    
    st.divider()
    
    # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç–µ
    st.subheader("–î–µ—Ç–∞–ª–∏ –ø–æ –¥–∞—Ç–µ")
    selected_date = st.date_input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É", value=date.today())
    
    if selected_date:
        # –ó–∞–¥–∞—á–∏ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
        day_tasks = [t for t in tasks if t.due == selected_date]
        if day_tasks:
            st.write("**–ó–∞–¥–∞—á–∏ –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å:**")
            for task in day_tasks:
                status = "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ" if task.done else "‚è∞ –í –ø—Ä–æ—Ü–µ—Å—Å–µ"
                st.write(f"- {task.title} ({task.priority}) - {status}")
                if task.desc:
                    st.caption(f"  {task.desc}")
        else:
            st.info("–ù–µ—Ç –∑–∞–¥–∞—á –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å")
        
        # –ó–∞–ø–∏—Å–∏ –æ–±—É—á–µ–Ω–∏—è –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
        day_learning = [l for l in learning_logs if l.log_date == selected_date]
        if day_learning:
            st.write("**–û–±—É—á–µ–Ω–∏–µ –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å:**")
            total_minutes = 0
            for log in day_learning:
                st.write(f"- {log.topic}: {log.minutes} –º–∏–Ω—É—Ç")
                if log.notes:
                    st.caption(f"  {log.notes}")
                total_minutes += log.minutes
            st.metric("–í—Å–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—É—á–µ–Ω–∏—è", f"{total_minutes} –º–∏–Ω—É—Ç")
        else:
            st.info("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ–±—É—á–µ–Ω–∏—è –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å")

with tabs[6]:
    """
    –í–ö–õ–ê–î–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô
    –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
    """
    st.subheader("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –∏ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ)
    with get_session() as session:
        all_notifications = session.exec(
            select(Notification).order_by(Notification.created_date.desc())
        ).all()
    
    if all_notifications:
        # –§–∏–ª—å—Ç—Ä—ã
        col1, col2, col3 = st.columns(3)
        with col1:
            show_type = st.selectbox("–¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", ["–í—Å–µ", "–î–µ–¥–ª–∞–π–Ω—ã", "–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è", "–ú–æ—Ç–∏–≤–∞—Ü–∏—è"])
        with col2:
            show_status = st.selectbox("–°—Ç–∞—Ç—É—Å", ["–í—Å–µ", "–ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ", "–ü—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ"])
        with col3:
            if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ"):
                with get_session() as session:
                    read_notifications = session.exec(
                        select(Notification).where(Notification.is_read == True)
                    ).all()
                    for notif in read_notifications:
                        session.delete(notif)
                    session.commit()
                st.rerun()
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        filtered_notifications = all_notifications
        
        if show_type != "–í—Å–µ":
            type_mapping = {"–î–µ–¥–ª–∞–π–Ω—ã": "deadline", "–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è": "achievement", "–ú–æ—Ç–∏–≤–∞—Ü–∏—è": "motivation"}
            filtered_notifications = [n for n in filtered_notifications if n.type == type_mapping[show_type]]
        
        if show_status != "–í—Å–µ":
            if show_status == "–ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ":
                filtered_notifications = [n for n in filtered_notifications if not n.is_read]
            else:
                filtered_notifications = [n for n in filtered_notifications if n.is_read]
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        for notif in filtered_notifications:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –∏ –∏–∫–æ–Ω–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            if notif.type == "deadline":
                if notif.is_read:
                    st.info(f"‚è∞ {notif.message} - {notif.created_date}")
                else:
                    st.warning(f"‚è∞ {notif.message} - {notif.created_date}")
            elif notif.type == "achievement":
                if notif.is_read:
                    st.info(f"üéâ {notif.message} - {notif.created_date}")
                else:
                    st.success(f"üéâ {notif.message} - {notif.created_date}")
            else:  # motivation
                if notif.is_read:
                    st.info(f"üí™ {notif.message} - {notif.created_date}")
                else:
                    st.info(f"üí™ {notif.message} - {notif.created_date}")
            
            # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
            col1, col2, col3 = st.columns([1, 1, 8])
            with col1:
                if not notif.is_read:
                    if st.button("‚úì –ü—Ä–æ—á–∏—Ç–∞–Ω–æ", key=f"mark_read_{notif.id}"):
                        mark_notification_read(notif.id)
                        st.rerun()
                else:
                    if st.button("‚Ü©Ô∏è –ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–æ", key=f"mark_unread_{notif.id}"):
                        with get_session() as session:
                            notification = session.get(Notification, notif.id)
                            if notification:
                                notification.is_read = False
                                session.add(notification)
                                session.commit()
                        st.rerun()
            
            with col2:
                if st.button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", key=f"delete_{notif.id}"):
                    with get_session() as session:
                        notification = session.get(Notification, notif.id)
                        if notification:
                            session.delete(notification)
                            session.commit()
                    st.rerun()
            
            st.divider()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            total_notifications = len(all_notifications)
            st.metric("–í—Å–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", total_notifications)
        
        with col2:
            unread_count = len([n for n in all_notifications if not n.is_read])
            st.metric("–ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö", unread_count)
        
        with col3:
            deadline_count = len([n for n in all_notifications if n.type == "deadline"])
            st.metric("–î–µ–¥–ª–∞–π–Ω—ã", deadline_count)
        
        with col4:
            achievement_count = len([n for n in all_notifications if n.type == "achievement"])
            st.metric("–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è", achievement_count)
    
    else:
        st.info("–ü–æ–∫–∞ –Ω–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. –î–æ–±–∞–≤—å—Ç–µ –∑–∞–¥–∞—á–∏ —Å –¥–µ–¥–ª–∞–π–Ω–∞–º–∏ –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏
        st.subheader("üí° –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:")
        st.write("‚Ä¢ **–î–µ–¥–ª–∞–π–Ω—ã**: –î–æ–±–∞–≤—å—Ç–µ –∑–∞–¥–∞—á–∏ —Å –¥–∞—Ç–∞–º–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
        st.write("‚Ä¢ **–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è**: –í—ã–ø–æ–ª–Ω–∏—Ç–µ 3+ –∑–∞–¥–∞—á –≤ –¥–µ–Ω—å –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –∫–Ω–∏–≥—É")
        st.write("‚Ä¢ **–ú–æ—Ç–∏–≤–∞—Ü–∏—è**: –ò–∑—É—á–∞–π—Ç–µ Python 60+ –º–∏–Ω—É—Ç –≤ –¥–µ–Ω—å")