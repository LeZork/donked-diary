import sys, os
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import streamlit as st
from datetime import date
from app.db import init_db, get_session
from app.models import Task, Show, Book, LearningLog
from sqlmodel import select

init_db()

st.set_page_config(page_title="–ú–æ–π –¥–Ω–µ–≤–Ω–∏–∫", page_icon="üìî", layout="wide")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ "—Ö—Ä–∞–Ω–∏–ª–∏—â–∞" –≤ —Å–µ—Å—Å–∏–∏
if "tasks" not in st.session_state:
	st.session_state.tasks = []
if "shows" not in st.session_state:
	st.session_state.shows = []
if "books" not in st.session_state:
	st.session_state.books = []
if "learning" not in st.session_state:
	st.session_state.learning = []

st.title("–ú–æ–π –¥–Ω–µ–≤–Ω–∏–∫")
st.caption("–ó–∞–¥–∞—á–∏ . –°–µ—Ä–∏–∞–ª—ã . –ö–Ω–∏–≥–∏ . –û–±—É—á–µ–Ω–∏–µ Python")

tabs = st.tabs(["‚úÖ –ó–∞–¥–∞—á–∏", "üé¨ –°–µ—Ä–∏–∞–ª—ã", "üìö –ö–Ω–∏–≥–∏", "üêç –û–±—É—á–µ–Ω–∏–µ Python"])

with tabs[0]:
	st.subheader("–ó–∞–¥–∞—á–∏")

	# –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
	with st.form("task_form_db", clear_on_submit=True):
		col1, col2, col3 = st.columns([3, 1.2, 1.2])
		with col1:
			title = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏")
		with col2:
			priority = st.selectbox("–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç", ["–ù–∏–∑–∫–∏–π", "–°—Ä–µ–¥–Ω–∏–π", "–í—ã—Å–æ–∫–∏–π"])
		with col3:
			due = st.date_input("–î–µ–¥–ª–∞–π–Ω", value=date.today())
		desc = st.text_area("–û–ø–∏—Å–∞–Ω–∏–µ", height=80)
		submit = st.form_submit_button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
		if submit and title.strip():
			with get_session() as session:
				task = Task(title=title.strip(), priority=priority, due=due, desc=desc.strip(), done=False)
				session.add(task)
				session.commit()
			st.success("–ó–∞–¥–∞—á–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
			st.rerun()

	st.divider()

	# –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –∏–∑ –ë–î
	with get_session() as session:
	    tasks = session.exec(
		    select(Task).order_by(Task.done.asc(), Task.due.is_(None), Task.due.asc())
	    ).all()

	if tasks:
		for t in tasks:
			col1, col2, col3, col4 = st.columns([3, 1, 1, 1])
			with col1:
				meta = f"{t.priority}"
				if t.due:
					meta += f" ¬∑ –¥–æ {t.due}"
				st.markdown(f"**{t.title}** ‚Äî {meta}")
				if t.desc:
					st.caption(t.desc)
			with col2:
				if st.button("–ì–æ—Ç–æ–≤–æ" if not t.done else "–°–Ω—è—Ç—å", key=f"task_done_{t.id}"):
					with get_session() as session:
						obj = session.get(Task, t.id)
						if obj:
							obj.done = not obj.done
							session.add(obj)
							session.commit()
					st.rerun()
			with col3:
				if st.button("–£–¥–∞–ª–∏—Ç—å", key=f"task_del_{t.id}"):
					with get_session() as session:
						obj = session.get(Task, t.id)
						if obj:
							session.delete(obj)
							session.commit()
					st.rerun()
			with col4:
				st.write("‚úÖ" if t.done else "‚Äî")
	else:
		st.info("–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á.")

with tabs[1]:
	st.subheader("–°–µ—Ä–∏–∞–ª—ã")
	with st.form("show_form", clear_on_submit=True):
		col1, col2, col3 = st.columns([3, 1, 1])
		with col1:
			title = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–∏–∞–ª–∞")
		with col2:
			season = st.number_input("–°–µ–∑–æ–Ω", min_value=1, value=1, step=1)
		with col3:
			episode = st.number_input("–°–µ—Ä–∏—è (—Ç–µ–∫—É—â–∞—è)", min_value=0, value=0, step=1)
		total_episodes = st.number_input("–í—Å–µ–≥–æ —Å–µ—Ä–∏–π –≤ —Å–µ–∑–æ–Ω–µ", min_value=0, value=0, step=1)
		submit = st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å/–û–±–Ω–æ–≤–∏—Ç—å")
		if submit and title.strip():
			st.session_state.shows.append({
				"title": title.strip(),
				"season": int(season),
				"episode": int(episode),
				"total": int(total_episodes)
			})
	if st.session_state.shows:
		for i, s in enumerate(st.session_state.shows):
			progress = f"{s['episode']}/{s['total']}" if s["total"] else f"{s['episode']}"
			col1, col2, col3, col4 = st.columns([3, 1, 1, 1])
			with col1:
				st.markdown(f"**{s['title']}** ‚Äî S{s['season']} E{progress}")
			with col2:
				if st.button("‚ûï –°–µ—Ä–∏—è", key=f"show_next_{i}"):
					st.session_state.shows[i]["episode"] += 1
					st.rerun()
			with col3:
				if st.button("–ù–æ–≤—ã–π —Å–µ–∑–æ–Ω", key=f"show_new_season_{i}"):
					st.session_state.shows[i]["season"] += 1
					st.session_state.shows[i]["episode"] = 0
					st.rerun()
			with col4:
				if st.button("–£–¥–∞–ª–∏—Ç—å", key=f"show_del_{i}"):
					st.session_state.shows.pop(i)
					st.rerun()
	else:
		st.info("–ü–æ–∫–∞ –Ω–µ—Ç —Å–µ—Ä–∏–∞–ª–æ–≤.")

with tabs[2]:
	st.subheader("–ö–Ω–∏–≥–∏")
	with st.form("book_form", clear_on_submit=True):
		col1, col2, col3 = st.columns([3, 1, 1])
		with col1:
			title = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏")
			author = st.text_input("–ê–≤—Ç–æ—Ä")
		with col2:
			pages_total = st.number_input("–°—Ç—Ä–∞–Ω–∏—Ü –≤—Å–µ–≥–æ", min_value=0, value=0, step=1)
		with col3:
			pages_read = st.number_input("–ü—Ä–æ—á–∏—Ç–∞–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü", min_value=0, value=0, step=1)
		submit = st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å/–û–±–Ω–æ–≤–∏—Ç—å")
		if submit and title.strip():
			st.session_state.books.append({
				"title": title.strip(),
				"author": author.strip(),
				"pages_total": int(pages_total),
				"pages_read": int(pages_read)
			})
	if st.session_state.books:
		for i, b in enumerate(st.session_state.books):
			ratio = (b["pages_read"] / b["pages_total"] * 100) if b["pages_total"] else 0
			col1, col2, col3, col4 = st.columns([3, 2, 1, 1])
			with col1:
				st.markdown(f"**{b['title']}** ‚Äî {b['author']}")
				st.progress(min(1.0, ratio / 100.0), text=f"{b['pages_read']} –∏–∑ {b['pages_total']} ({ratio:.0f}%)")
			with col2:
				new_read = st.number_input("–î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü", min_value=0, value=0, step=1, key=f"book_add_{i}")
			with col3:
				if st.button("‚ûï –ü—Ä–æ–≥—Ä–µ—Å—Å", key=f"book_inc_{i}"):
					st.session_state.books[i]["pages_read"] += int(new_read)
					st.rerun()
			with col4:
				if st.button("–£–¥–∞–ª–∏—Ç—å", key=f"book_del_{i}"):
					st.session_state.books.pop(i)
					st.rerun()
	else:
		st.info("–ü–æ–∫–∞ –Ω–µ—Ç –∫–Ω–∏–≥.")

with tabs[3]:
	st.subheader("–û–±—É—á–µ–Ω–∏–µ Python")
	with st.form("learning_form", clear_on_submit=True):
		topic = st.text_input("–¢–µ–º–∞/–∫—É—Ä—Å/–≥–ª–∞–≤–∞")
		time_spent = st.number_input("–í—Ä–µ–º—è (–º–∏–Ω)", min_value=0, value=30, step=10)
		notes = st.text_area("–ó–∞–º–µ—Ç–∫–∏", height=80)
		submit = st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å")
		if submit and topic.strip():
			st.session_state.learning.append({
				"topic": topic.strip(),
				"minutes": int(time_spent),
				"notes": notes.strip(),
				"date": str(date.today())
			})
	if st.session_state.learning:
		total_min = sum(r["minutes"] for r in st.session_state.learning)
		st.metric("–í—Å–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏", f"{total_min} –º–∏–Ω")
		for i, r in enumerate(st.session_state.learning):
			col1, col2, col3 = st.columns([3, 2, 1])
			with col1:
				st.markdown(f"**{r['topic']}** ‚Äî {r['date']}")
				if r["notes"]:
					st.caption(r["notes"])
			with col2:
				st.write(f"{r['minutes']} –º–∏–Ω")
			with col3:
				if st.button("–£–¥–∞–ª–∏—Ç—å", key=f"learn_del_{i}"):
					st.session_state.learning.pop(i)
					st.rerun()
	else:
		st.info("–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ–±—É—á–µ–Ω–∏—è.")